[tool.poetry]
name = "nb-cli-plugin-zhenxun"
version = "0.1.9"
description = "Nonebot Cli plugin for zhenxun"
authors = ["HibiKier <775757368@qq.com>"]
keywords = ["nonebot2", "nb-cli"]
homepage = "https://github.com/zhenxun-org/nb-cli-plugin-zhenxun"
readme = "README.md"
license = "AGPL"

[[tool.poetry.source]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple/"
priority = "primary"

[tool.poetry.plugins.nb]
zhenxun = "nb_cli_plugin_zhenxun.plugin:main"

[tool.poetry.dependencies]
python = "^3.10"
nb-cli = "^1.0.2"
py-cpuinfo = "^9.0.0"
rich = "^13.3.1"
strenum = "^0.4.15"
aiocache = "^0.12.3"

[tool.poetry.dev-dependencies]
ruff = "^0.8.0"
black = "^23.7.0"
pre-commit = "^4.0.0"

[tool.poetry.group.dev.dependencies]
nb-cli = "^1.4.2"

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = [
    "F",     # Pyflakes
    "W",     # pycodestyle warnings
    "E",     # pycodestyle errors
    "I",     # isort
    "UP",    # pyupgrade
    "ASYNC", # flake8-async
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "TID",   # flake8-tidy-imports
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E402",   # module-import-not-at-top-of-file
    "UP037",  # quoted-annotation
    "RUF001", # ambiguous-unicode-character-string
    "RUF002", # ambiguous-unicode-character-docstring
    "RUF003", # ambiguous-unicode-character-comment
    "TID252", # relative-imports
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["zhenxun", "tests/*"]
extra-standard-library = ["typing_extensions"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "All"
defineConstant = { PYDANTIC_V2 = true }
executionEnvironments = [
    { root = "./tests", extraPaths = [
        "./",
    ] },
    { root = "./" },
]

typeCheckingMode = "standard"
reportShadowedImports = false
disableBytesTypePromotions = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

